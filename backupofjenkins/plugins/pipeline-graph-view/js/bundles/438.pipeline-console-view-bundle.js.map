{"version":3,"file":"438.pipeline-console-view-bundle.js","mappings":"kqDAQA,IAAMA,EAAwB,SAC5BC,EACAC,GAEA,OAAOD,EAAWE,KAAI,SAACC,GACrB,IAAIC,EAA0B,GAI9B,OAHID,EAAcC,UAAYD,EAAcC,SAASC,OAAS,IAC5DD,EAAWL,EAAsBI,EAAcC,SAAUH,IAGzDK,EAAAA,cAACC,EAAAA,EAAQ,CACPC,UACEC,OAAON,EAAcO,KAAOT,EACxB,2BACA,kBAENU,IAAKR,EAAcO,GACnBE,OAAQH,OAAON,EAAcO,IAC7BG,MACEP,EAAAA,cAAA,OACEI,GAAE,mBAAAI,OAAqBX,EAAcO,IACrCC,IAAG,mBAAAG,OAAqBX,EAAcO,KAEtCJ,EAAAA,cAACS,EAAAA,EAAU,CACTC,OAAQb,EAAcc,MACtBC,KAAMf,EAAcgB,KACpBR,IAAG,UAAAG,OAAYX,EAAcO,IAC7BU,QAASjB,EAAckB,gBACvBC,OAAQ,MAIdlB,SAAUA,EACVmB,QAAS,CACPV,MAAOV,EAAcqB,UACjB,iCACAC,IAIZ,GACF,EAUqBC,EAAY,SAAAC,GAG/B,SAAAD,EAAYE,GAA0B,IAAAC,EAOa,O,4FAPbC,CAAA,KAAAJ,IACpCG,EAAAE,EAAA,KAAAL,EAAA,CAAME,KACDX,MAAQ,CACXe,OAAQ,GACRC,MAAO,IAAIC,IACXC,SAAU,IAEZN,EAAKO,aAAeP,EAAKO,aAAaC,KAAIR,GAAOA,CACnD,CAAC,O,qRAAAS,CAAAZ,EAAAC,G,EAAAD,G,EAAA,EAAAf,IAAA,eAAA4B,MAED,SAAaC,EAA8BC,GACzCC,KAAKC,SAAS,CACZR,SAAUM,GAEd,GAAC,CAAA9B,IAAA,SAAA4B,MAED,WACE,OACEjC,EAAAA,cAACsC,EAAAA,EAAQ,CACPC,oBAAqBvC,EAAAA,cAACwC,EAAAA,EAAc,MACpCC,kBAAmBzC,EAAAA,cAAC0C,EAAAA,EAAgB,MACpCb,SAAUO,KAAKd,MAAMO,SACrBc,SAAUP,KAAKd,MAAMqB,SACrBC,aAAcR,KAAKd,MAAMsB,aACzBC,aAAcT,KAAKd,MAAMuB,aACzBC,YAAa,SAACZ,EAA6B5B,GACzCyC,QAAQC,MAAM,SAADxC,OAAUF,EAAM,cAC/B,EACAD,IAAI,qBAEHZ,EAAsB2C,KAAKd,MAAMI,OAAQU,KAAKd,MAAMqB,UAG3D,M,6EAAC,CApC8B,CAAS3C,EAAAA,U,0ECjCnC,SAASiD,EACdvC,EACAwC,EACAlC,GAEA,IAAMmC,GAAOC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,IAAkB3C,GAClBwC,QAAAA,EAAY,IACZlC,QAAAA,EAAU,GACV,EACA,EACA,CAAC,GAEGsC,EAAWtC,EAAkB,EAATA,EAAa,GACvC,OACEhB,EAAAA,cAAA,OACEuD,MAAO,CACLC,QAAS,eACTC,WAAY,MACZC,cAAe,SACfC,WAAY,WAGd3D,EAAAA,cAAA,OACE4D,QAAO,OAAApD,OAAS8C,EAAQ,KAAA9C,OAAI8C,GAC5BO,MAAK,GAAArD,OAAK8C,EAAQ,MAClBQ,OAAM,GAAAtD,OAAK8C,EAAQ,OAElBH,GAIT,CAEA,QA9C4C,SAAC7B,GAC3C,IAAMyC,EAAad,EAAc3B,EAAMZ,OAAQY,EAAMR,QAASQ,EAAMN,QACpE,OACEhB,EAAAA,cAAAA,EAAAA,SAAA,KACG+D,EACD/D,EAAAA,cAAA,QAAMuD,MAAO,CAAES,WAAY,SAAUC,QAAS,SAC3C3C,EAAMV,MAIf,C","sources":["webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-console-view/pipeline-console/main/DataTreeView.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/step-status/StepStatus.tsx"],"sourcesContent":["import React from \"react\";\nimport TreeView from \"@mui/lab/TreeView/\";\nimport TreeItem from \"@mui/lab/TreeItem\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport { StageInfo } from \"../../../pipeline-graph-view/pipeline-graph/main/\";\nimport StepStatus from \"../../../step-status/StepStatus\";\n\nconst getTreeItemsFromStage = (\n  stageItems: StageInfo[],\n  selectedStage: string\n) => {\n  return stageItems.map((stageItemData) => {\n    let children: JSX.Element[] = [];\n    if (stageItemData.children && stageItemData.children.length > 0) {\n      children = getTreeItemsFromStage(stageItemData.children, selectedStage);\n    }\n    return (\n      <TreeItem\n        className={\n          String(stageItemData.id) == selectedStage\n            ? \"stage-tree-item-selected\"\n            : \"stage-tree-item\"\n        }\n        key={stageItemData.id}\n        nodeId={String(stageItemData.id)}\n        label={\n          <div\n            id={`stage-tree-icon-${stageItemData.id}`}\n            key={`stage-tree-icon-${stageItemData.id}`}\n          >\n            <StepStatus\n              status={stageItemData.state}\n              text={stageItemData.name}\n              key={`status-${stageItemData.id}`}\n              percent={stageItemData.completePercent}\n              radius={10}\n            />\n          </div>\n        }\n        children={children}\n        classes={{\n          label: stageItemData.synthetic\n            ? \"pgv-graph-node--synthetic\"\n            : undefined,\n        }}\n      />\n    );\n  });\n};\n\nexport interface DataTreeViewProps {\n  stages: Array<StageInfo>;\n  onNodeToggle: (event: React.ChangeEvent<any>, nodeIds: string[]) => void;\n  onNodeSelect: (event: React.ChangeEvent<any>, nodeIds: string) => void;\n  selected: string;\n  expanded: string[];\n}\n\nexport default class DataTreeView extends React.Component {\n  props!: DataTreeViewProps;\n\n  constructor(props: DataTreeViewProps) {\n    super(props);\n    this.state = {\n      stages: [],\n      steps: new Map(),\n      expanded: [],\n    };\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleToggle(event: React.ChangeEvent<{}>, nodeIds: string[]): void {\n    this.setState({\n      expanded: nodeIds,\n    });\n  }\n\n  render() {\n    return (\n      <TreeView\n        defaultCollapseIcon={<ExpandMoreIcon />}\n        defaultExpandIcon={<ChevronRightIcon />}\n        expanded={this.props.expanded}\n        selected={this.props.selected}\n        onNodeToggle={this.props.onNodeToggle}\n        onNodeSelect={this.props.onNodeSelect}\n        onNodeFocus={(event: React.SyntheticEvent, nodeId: string) => {\n          console.debug(`node '${nodeId}' focused.`);\n        }}\n        key=\"console-tree-view\"\n      >\n        {getTreeItemsFromStage(this.props.stages, this.props.selected)}\n      </TreeView>\n    );\n  }\n}\n","import { CSSProperties, FunctionComponent } from \"react\";\nimport * as React from \"react\";\nimport { Result } from \"../pipeline-graph-view/pipeline-graph/main\";\nimport { decodeResultValue } from \"../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel\";\nimport { getGroupForResult } from \"../pipeline-graph-view/pipeline-graph/main/support/StatusIcons\";\nimport { height } from \"@mui/system\";\n\ninterface Props {\n  status: Result;\n  text: string;\n  percent: number;\n  radius?: number;\n}\n\nconst Component: FunctionComponent<Props> = (props: Props) => {\n  const statusIcon = getStepStatus(props.status, props.percent, props.radius);\n  return (\n    <>\n      {statusIcon}\n      <span style={{ marginLeft: \"0.3rem\", padding: \"auto\" }}>\n        {props.text}\n      </span>\n    </>\n  );\n};\n\nexport function getStepStatus(\n  status: Result,\n  complete?: number,\n  radius?: number\n) {\n  const icon = getGroupForResult(\n    decodeResultValue(status),\n    complete ?? 100,\n    radius ?? 12,\n    0,\n    0,\n    {}\n  );\n  const diameter = radius ? radius * 2 : 24;\n  return (\n    <div\n      style={{\n        display: \"inline-block\",\n        paddingTop: \"1px\",\n        verticalAlign: \"middle\",\n        lineHeight: \"normal\",\n      }}\n    >\n      <svg\n        viewBox={`0 0 ${diameter} ${diameter}`}\n        width={`${diameter}px`}\n        height={`${diameter}px`}\n      >\n        {icon}\n      </svg>\n    </div>\n  );\n}\n\nexport default Component;\n"],"names":["getTreeItemsFromStage","stageItems","selectedStage","map","stageItemData","children","length","React","TreeItem","className","String","id","key","nodeId","label","concat","StepStatus","status","state","text","name","percent","completePercent","radius","classes","synthetic","undefined","DataTreeView","_React$Component","props","_this","_classCallCheck","_callSuper","stages","steps","Map","expanded","handleToggle","bind","_inherits","value","event","nodeIds","this","setState","TreeView","defaultCollapseIcon","ExpandMoreIcon","defaultExpandIcon","ChevronRightIcon","selected","onNodeToggle","onNodeSelect","onNodeFocus","console","debug","getStepStatus","complete","icon","getGroupForResult","decodeResultValue","diameter","style","display","paddingTop","verticalAlign","lineHeight","viewBox","width","height","statusIcon","marginLeft","padding"],"sourceRoot":""}